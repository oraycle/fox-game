{"version":3,"sources":["ui.js","constants.js","gameState.js","buttons.js","init.js"],"names":["modFox","state","document","querySelector","className","modScene","togglePoopBag","show","classList","toggle","writeModal","text","innerHTML","TICK_RATE","ICONS","RAIN_CHANCE","SCENES","DAY_LENGTH","NIGHT_LENGTH","getNextHungerTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","gameState","current","wakeTime","sleepTime","hungryTime","dieTime","poopTime","timeToStartCelebrating","timeToEndCelebrating","tick","console","log","wake","sleep","getHungry","die","startCelebrating","endCelebrating","poop","startGame","scene","determineFoxState","clearTimes","handleUserAction","icon","includes","changeWeather","cleanUpPoop","feed","length","bind","toggleHighlighted","initButtons","selectedIcon","addEventListener","buttonClick","target","contains","init","nextTimeToTick","Date","now","requestAnimationFrame","nextAnimationFrame"],"mappings":"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","file":"init.ec578768.js","sourceRoot":"../src","sourcesContent":["export const modFox = function modFox(state) {\n  document.querySelector(\".fox\").className = `fox fox-${state}`;\n};\n\nexport const modScene = function modScenes(state) {\n  document.querySelector(\".game\").className = `game ${state}`;\n};\n\nexport const togglePoopBag = function togglePoopBag(show) {\n  document.querySelector(\".poop-bag\").classList.toggle(\"hidden\", !show);\n};\n\nexport const writeModal = function writeModal(text = \"\") {\n  document.querySelector(\n    \".modal\"\n  ).innerHTML = `<div class=\"modal-inner>${text}</div>`;\n};\n","export const TICK_RATE = 3000;\nexport const ICONS = [\"fish\", \"poop\", \"weather\"];\nexport const RAIN_CHANCE = 0.2;\nexport const SCENES = [\"day\", \"rain\"];\nexport const DAY_LENGTH = 60;\nexport const NIGHT_LENGTH = 4;\n\nexport const getNextHungerTime = (clock) =>\n  Math.floor(Math.random() * 3) + 5 + clock;\nexport const getNextDieTime = (clock) =>\n  Math.floor(Math.random() * 3) + 3 + clock;\nexport const getNextPoopTime = (clock) =>\n  Math.floor(Math.random() * 3) + 4 + clock;\n","import { modFox, modScene, togglePoopBag, writeModal } from \"./ui\";\nimport {\n  RAIN_CHANCE,\n  SCENES,\n  DAY_LENGTH,\n  NIGHT_LENGTH,\n  getNextHungerTime,\n  getNextDieTime,\n  getNextPoopTime,\n} from \"./constants\";\n\nconst gameState = {\n  current: \"INIT\",\n  clock: 1,\n  wakeTime: -1,\n  sleepTime: -1,\n  hungryTime: -1,\n  dieTime: -1,\n  poopTime: -1,\n  timeToStartCelebrating: -1,\n  timeToEndCelebrating: -1,\n  tick() {\n    this.clock++;\n    console.log(\"clock\", this.clock);\n    if (this.clock === this.wakeTime) {\n      this.wake();\n    } else if (this.clock === this.sleepTime) {\n      this.sleep();\n    } else if (this.clock === this.hungryTime) {\n      this.getHungry();\n    } else if (this.clock === this.dieTime) {\n      this.die();\n    } else if (this.clock === this.timeToStartCelebrating) {\n      this.startCelebrating();\n    } else if (this.clock === this.timeToEndCelebrating) {\n      this.endCelebrating();\n    } else if (this.clock === this.poopTime) {\n      this.poop();\n    }\n    return this.clock;\n  },\n  startGame() {\n    console.log(\"hatching\");\n    this.current = \"HATCHING\";\n    this.wakeTime = this.clock + 3;\n    modFox(\"egg\");\n    modScene(\"day\");\n    writeModal();\n  },\n  wake() {\n    console.log(\"awoken\");\n    this.current = \"IDLING\";\n    this.wakeTime = -1;\n    modFox(\"idling\");\n    this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\n    modScene(SCENES[this.scene]);\n    this.sleepTime = this.clock + DAY_LENGTH;\n    this.hungryTime = getNextHungerTime(this.clock);\n    this.determineFoxState();\n  },\n  sleep() {\n    this.state = \"SLEEP\";\n    modFox(\"sleep\");\n    modScene(\"night\");\n    this.clearTimes();\n    this.wakeTime = this.clock + NIGHT_LENGTH;\n  },\n  clearTimes() {\n    this.wakeTime = -1;\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.dieTime = -1;\n    this.poopTime = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = -1;\n  },\n  getHungry() {\n    this.current = \"HUNGRY\";\n    this.dieTime = getNextDieTime(this.clock);\n    this.hungryTime = -1;\n    modFox(\"hungry\");\n  },\n  poop() {\n    this.current = \"POOPING\";\n    this.poopTime = -1;\n    this.dieTime = getNextDieTime(this.clock);\n    modFox(\"pooping\");\n  },\n  die() {\n    this.current = \"DEAD\";\n    modScene(\"dead\");\n    modFox(\"dead\");\n    this.clearTimes();\n    writeModal(\"The fox dies :( <br/> Press the middle button to start\");\n  },\n  startCelebrating() {\n    this.current = \"CELEBRATING\";\n    modFox(\"celebrate\");\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = this.clock + 2;\n  },\n  endCelebrating() {\n    this.timeToEndCelebrating = -1;\n    this.current = \"IDLING\";\n    this.determineFoxState();\n    togglePoopBag(false);\n  },\n  determineFoxState() {\n    if (this.current === \"IDLING\") {\n      if (SCENES[this.scene] === \"rain\") {\n        modFox(\"rain\");\n      } else {\n        modFox(\"idling\");\n      }\n    }\n  },\n  handleUserAction(icon) {\n    if (\n      [\"SLEEP\", \"FEEDING\", \"CELEBRATING\", \"HATCHING\"].includes(this.current)\n    ) {\n      // do nothing\n      return;\n    }\n\n    if (this.current === \"INIT\" || this.current === \"DEAD\") {\n      this.startGame();\n      return;\n    }\n    switch (icon) {\n      case \"weather\":\n        this.changeWeather();\n        break;\n\n      case \"poop\":\n        this.cleanUpPoop();\n        break;\n\n      case \"fish\":\n        this.feed();\n        break;\n    }\n  },\n  changeWeather() {\n    this.scene = this.scene + (1 % SCENES.length);\n    modScene(SCENES[this.scene]);\n    this.determineFoxState();\n  },\n  cleanUpPoop() {\n    if (this.current != \"POOPING\") {\n      // do nothing\n      return;\n    }\n    this.dieTime = -1;\n    togglePoopBag(true);\n    this.startCelebrating();\n    this.hungryTime = getNextHungerTime(this.clock);\n  },\n  feed() {\n    if (this.current != \"HUNGRY\") {\n      // do nothing\n      return;\n    }\n    this.current = \"FEEDING\";\n    this.dieTime = -1;\n    this.poopTime = getNextPoopTime(this.clock);\n    modFox(\"eating\");\n    this.timeToStartCelebrating = this.clock + 2;\n  },\n};\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\nexport default gameState;\n","import { ICONS } from \"./constants\";\n\nconst toggleHighlighted = (icon, show) =>\n  document\n    .querySelector(`.${ICONS[icon]}-icon`)\n    .classList.toggle(\"highlighted\", show);\n\nexport default function initButtons(handleUserAction) {\n  let selectedIcon = 0;\n\n  function buttonClick({ target }) {\n    if (target.classList.contains(\"left-btn\")) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (2 + selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else if (target.classList.contains(\"right-btn\")) {\n      toggleHighlighted(selectedIcon, false);\n      selectedIcon = (1 + selectedIcon) % ICONS.length;\n      toggleHighlighted(selectedIcon, true);\n    } else {\n      handleUserAction(ICONS[selectedIcon]);\n    }\n  }\n  document.querySelector(\".buttons\").addEventListener(\"click\", buttonClick);\n}\n","import gameState, { handleUserAction } from \"./gameState\";\nimport { TICK_RATE } from \"./constants\";\nimport initButtons from \"./buttons\";\n\nasync function init() {\n  console.log(\"starting game\");\n  initButtons(handleUserAction);\n\n  let nextTimeToTick = Date.now();\n\n  function nextAnimationFrame() {\n    const now = Date.now();\n\n    if (nextTimeToTick <= now) {\n      gameState.tick();\n      nextTimeToTick = now + TICK_RATE;\n    }\n\n    requestAnimationFrame(nextAnimationFrame);\n  }\n  requestAnimationFrame(nextAnimationFrame);\n}\n\ninit();\n"]}